import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

# –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üìñ Business Vocabulary"),
    KeyboardButton("üìù Writing Zone")
).add(
    KeyboardButton("üéô Speaking Practice"),
    KeyboardButton("üéØ Daily Quizzes")
).add(
    KeyboardButton("üíº Interview Trainer")
)

# —Å–ª–æ–≤–∞—Ä—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
vocab = {
    "Marketing": ["Brand awareness", "Target audience", "Lead generation"],
    "Finance": ["Assets", "Liabilities", "Equity"],
    "HR": ["Recruitment", "Onboarding", "Retention"]
}

# —à–∞–±–ª–æ–Ω—ã —Ñ—Ä–∞–∑
writing_templates = [
    "Dear Sir or Madam, ...",
    "I am writing to apply for the position of...",
    "Please find attached my CV...",
    "Looking forward to your reply.",
    "Best regards, ..."
]

# –±–∏–∑–Ω–µ—Å-—Ñ—Ä–∞–∑—ã –∏ –¥–∏–∞–ª–æ–≥–∏
speaking_phrases = [
    "Let's touch base next week.",
    "Could you clarify that, please?",
    "What are the next steps?",
    "I'm afraid I don't have that information right now.",
    "That sounds like a great idea!"
]

# –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
quizzes = [
    {"q": "What does 'B2B' mean?", "a": "Business to Business"},
    {"q": "Translate: 'Return on Investment'", "a": "–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"},
    {"q": "What is a CV?", "a": "Curriculum Vitae"}
]

# —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
interview_questions = [
    "Tell me about yourself.",
    "Why do you want to work here?",
    "What are your strengths and weaknesses?",
    "Describe a challenging situation at work and how you handled it.",
    "Where do you see yourself in 5 years?"
]

# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Career_EnglishBot! –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(lambda message: message.text == "üìñ Business Vocabulary")
async def business_vocab(message: types.Message):
    text = "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É —Å–ª–æ–≤–∞—Ä—è:\n"
    for topic in vocab:
        text += f"- {topic}\n"
    await message.answer(text)

@dp.message_handler(lambda message: message.text == "üìù Writing Zone")
async def writing_zone(message: types.Message):
    await message.answer("–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏:")
    for phrase in writing_templates:
        await message.answer(phrase)

@dp.message_handler(lambda message: message.text == "üéô Speaking Practice")
async def speaking_zone(message: types.Message):
    await message.answer("–¢—Ä–µ–Ω–∏—Ä—É–π—Å—è —Å —ç—Ç–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏:")
    for phrase in speaking_phrases:
        await message.answer(phrase)

@dp.message_handler(lambda message: message.text == "üéØ Daily Quizzes")
async def quizzes_zone(message: types.Message):
    for quiz in quizzes:
        await message.answer(f"‚ùì {quiz['q']}\n‚úÖ –û—Ç–≤–µ—Ç: {quiz['a']}")

@dp.message_handler(lambda message: message.text == "üíº Interview Trainer")
async def interview_zone(message: types.Message):
    await message.answer("–ü—Ä–∏–º–µ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é:")
    for question in interview_questions:
        await message.answer(f"üíº {question}")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def echo(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu)

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)