import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
dp.middleware.setup(LoggingMiddleware())

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø Career_EnglishBot. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å —Ç–≤–æ–π –±–∏–∑–Ω–µ—Å-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π!")

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await message.reply("–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –±–∏–∑–Ω–µ—Å-–ª–µ–∫—Å–∏–∫–æ–π, —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–ª—è –ø–∏—Å–µ–º –∏ –¥–∞–∂–µ –ø—Ä–æ–≤–µ–¥—É —Å —Ç–æ–±–æ–π —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è! –ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@dp.message_handler(commands=['quiz'])
async def cmd_quiz(message: types.Message):
    await message.reply("–ö–∞–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏?")

# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã
@dp.message_handler()
async def echo(message: types.Message):
    user_answer = message.text.lower()
    correct_answers = ["dear", "hello", "greetings"]
    if any(answer in user_answer for answer in correct_answers):
        await message.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üòä")
    else:
        await message.reply("–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! ‚ùå")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)